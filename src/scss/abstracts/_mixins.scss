@use 'sass:map';
@use "sass:meta";
@use "sass:selector";

@use 'breakpoints' as *;

$font-size-default: 1em;
$font-family-default: Calibri;

@mixin mq($key) {
  $size: map.get($breakpoints, $key);

  @media only screen and (min-width: $size) {
    @content;
  }
}


@mixin inset-divider-offset($offset, $padding) {
  $divider-offset: (2 * $padding) + $offset;
  @debug "divider offset: #{$divider-offset}";

  margin-left: $divider-offset;
  width: calc(100% - #{$divider-offset});
}


$known-prefixes: webkit, moz, ms, o;
@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if not index($known-prefixes, $prefix) {
      @warn "Unknown prefix #{$prefix}.";
    }

    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}

// @mixin prefix($property, $value, $prefixes) {
//   @each $prefix in $prefixes {
//     -#{$prefix}-#{$property}: $value;
//   }

//   #{$property}: $value;
// }


@mixin reset-list {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin horizontal-list {
  @include reset-list;

  li {
    display: inline-block;

    margin: {
      left: -2px;
      right: 2em;
    }
  }
}


@mixin syntax-colors($args...) {
  @debug meta.keywords($args);
  // (string: #080, comment: #800, variable: #60b)

  @each $name,
  $color in meta.keywords($args) {
    pre span.stx-#{$name} {
      color: $color;
    }
  }
}


@mixin button($args...) {}

@mixin btn($args...) {
  @warn "The btn() mixin is deprecated. Include button() instead.";
  @include button($args...);
}


@mixin hover {
  &:not([disabled]):hover {
    @content;
  }
}

@mixin pseudo(
  $loc: before,
  $content: '',
  $pos: absolute,
  $top: 0,
  $right: 0,
  $bottom: 0,
  $left: 0,
) {
  @debug "pseudo($loc, $content, $position)";
  position: relative;

  &:#{$loc} {
    content: $content;
    position: $pos;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
    @content;
  }
}

@mixin hover-lift {
  transition: transform 350ms ease-in-out;
  box-shadow: 0 0.25em 0.5em 0 rgba(0, 0, 0, 0.2);

  @include pseudo($loc: before, $content: '', $pos: absolute) {
    box-shadow: 0 0 1.25em 0 rgba(0, 0, 0, 0.4);
    transform: translateY(-0.25em);
    opacity: 0;
  }

  &:hover,
  &:focus {
      transform: translateY(0.25em);

      &:before {
        opacity: 1;
      }
  }
}


@mixin media($types...) {
  @each $type in $types {
    @media #{$type} {
      @content($type);
    }
  }
}


@mixin inline-animation($duration) {
  $name: inline-#{unique-id()};

  @keyframes #{$name} {
    @content;
  }

  animation-name: $name;
  animation-duration: $duration;
  animation-iteration-count: infinite;
}


@mixin app-background($color) {
  #{if(&, '&.app-background', '.app-background')} {
    background-color: $color;
    color: rgba(#fff, 0.75);
  }
}


@mixin unify-parent($child) {
  @at-root #{selector.unify(&, $child)} {
    @content;
  }
}

@mixin theme($theme: DarkGray) {
  background: $theme;
  box-shadow: 0 0 1px rgba($theme, .25);
  color: #fff;
}


@mixin flex($justify, $align, $direction: row, $wrap: nowrap) {
  display: flex;
  flex-wrap: $wrap;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin border-radius(
  $top-left,
  $top-right,
  $bottom-left,
  $bottom-right
) {
  border-radius: $top-left top-right $bottom-left $bottom-right;
}

@mixin border(
  $top: 0,
  $right: 0,
  $bottom: 0,
  $left: 0,
  $color: gray
) {
  border-top: $top solid $color;
  border-right: $right solid $color;
  border-bottom: $bottom solid $color;
  border-left: $left solid $color;
}

@mixin font-props(
  $font: $font-family-default,
  $fontSize: $font-size-default,
  $color: black,
  $weight: normal
) {
  color: $color;
  font-size: $fontSize;
  font-weight: $weight;
  font-family: $font;
}
